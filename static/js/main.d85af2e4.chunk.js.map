{"version":3,"sources":["components/title/title.styles.js","components/title/title.component.js","redux/extraDetSlice.js","components/modal/modal.styles.js","redux/modalSlice.js","redux/imageSlice.js","components/crop/crops.styles.js","components/progress-bar/progress-bar.styles.js","firebase/config.js","components/hooks/useStorage.js","components/progress-bar/progress-bar.js","components/hooks/deletefx.js","components/actionfunction/action.styles.js","components/actionfunction/action.js","components/utils/b64ToFile.util.js","components/crop/crop.js","components/modal/modal.js","components/upload/form.styles.js","components/upload/form.component.js","components/hooks/useFirestore.js","components/image-grid/image-grid.styles.js","components/utils/ImgUrlToBlob.util.js","components/image-grid/image-grid.js","App.js","redux/store.js","serviceWorker.js","index.js"],"names":["Heading","styled","h1","Para","p","Subheading","h2","Title","extraSlice","createSlice","name","initialState","like","reducers","acceptReject","state","actions","selectLike","extra","Container","div","Background","ModalWrapper","Content","ImageContent","img","type","DataContent","Details","span","CropButton","button","input","ModifiedButtons","css","LikeModalButton","AiOutlineLike","CloseModalButton","MdClose","modalSlice","showCloseMd","switchModal","selectModal","modal","imageSlice","image","file","title","fx","addImage","action","payload","addFile","addFx","addTitle","selectImage","selectFile","selectTitle","selectFx","CropBox","Cropper","db","firebase","apps","length","app","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","storage","timestamp","FieldValue","serverTimestamp","useStorage","useSelector","useState","progress","setProgress","error","setError","url","setUrl","collectionRef","collection","useEffect","storageRef","ref","put","on","snap","percentage","bytesTransferred","totalBytes","err","a","getDownloadURL","createdAt","add","ProgressBar","cropData","dispatch","useDispatch","style","width","deleteFile","id","doc","delete","then","catch","console","log","ActionContainer","ActionWrapper","Action","fileFromDb","completed","setCompleted","b64ToFile","filename","mimeType","match","fetch","res","arrayBuffer","buf","File","Crop","setCropData","cropper","setCropper","getCropData","e","preventDefault","getCroppedCanvas","toDataURL","initialAspectRatio","src","viewMode","guides","cropBoxResizable","minCropBoxHeight","minCropBoxWidth","background","responsive","autoCropArea","checkOrientation","onInitialized","instance","onClick","Modal","toDate","toDateString","displayLike","setDisplayLike","setTitle","show","setShow","buttonRef","useRef","modalRef","animation","useSpring","config","duration","opacity","transform","closeNullifyValues","reader","FileReader","onloadend","result","readAsDataURL","current","target","alt","placeholder","onChange","value","display","aria-label","click","Output","Result","Error","InputForm","form","Label","label","Form","ResultType","accept","selected","files","substr","useFirestore","docs","setDocs","unsub","orderBy","onSnapshot","documents","forEach","push","data","GridContainer","HeaderBar","CloseButton","MdDelete","GridImage","convertImgToBase64URL","callback","outputFormat","Image","crossOrigin","onload","dataURL","canvas","document","createElement","ctx","getContext","height","drawImage","Grid","setReload","displayPage","details","base64Img","deleteImage","prev","map","App","selectedFile","store","configureStore","reducer","imageReducer","modalReducer","extraReducer","Boolean","window","location","hostname","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d85af2e4.chunk.js","sourcesContent":["import styled from 'styled-components'\r\n\r\n\r\nexport const Heading = styled.h1`\r\n  color: var(--primary);\r\n  font-size: 1.2rem;\r\n  letter-spacing: 2px;\r\n  font-weight: normal;\r\n`\r\n\r\nexport const Para = styled.p`\r\n    text-align: center;\r\n`\r\n\r\nexport const Subheading = styled.h2`\r\n    margin-top: 60px;\r\n    font-size: 2.6rem;\r\n`","import { Heading, Para, Subheading } from \"./title.styles\"\r\n\r\n\r\nconst Title = () => {\r\n    return (\r\n        <div>\r\n            <Heading>Firegram</Heading>\r\n            <Subheading>Firebase Gallery</Subheading>\r\n            <Para>\r\n            A Firebase gallery made completely in the frontend. Hence, cropping images can result in loss in quality but it serves its purpose of uploading to and downloading from firebase via a reasonable UI\r\n            </Para>\r\n        </div> \r\n    )\r\n}\r\n\r\nexport default Title\r\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nconst initialState = {\r\n  like:false\r\n};\r\n\r\n\r\nexport const extraSlice = createSlice({\r\n  name: 'extra',\r\n  initialState,\r\n  // The `reducers` field lets us define reducers and generate associated actions\r\n  reducers: {\r\n    acceptReject: (state) => {\r\n        state.like = !state.like\r\n    }\r\n  }\r\n});\r\n\r\nexport const { acceptReject } = extraSlice.actions;\r\n\r\nexport const selectLike = (state) => state.extra.like;\r\n\r\nexport default extraSlice.reducer;\r\n","import styled, {css} from 'styled-components'\r\nimport {MdClose} from 'react-icons/md'\r\nimport { AiOutlineLike } from 'react-icons/ai'\r\n\r\n\r\nexport const Container = styled.div`\r\n    display:flex;\r\n    top:0;\r\n    left:0;\r\n    width:100%;\r\n    position:absolute;\r\n    align-items:center;\r\n    justify-content:center;\r\n    height:100vh;\r\n`\r\n\r\nexport const Background = styled.div`\r\nwidth:100%;\r\nheight:100vh;\r\nbackground-color:rgba(0,0,0,0.8);\r\nposition:fixed;\r\ndisplay:flex;\r\njustify-content:center;\r\nalign-items:center;\r\nz-index:100;\r\n`\r\n\r\nexport const ModalWrapper = styled.div`\r\nwidth:65vw;\r\nheight:75vh;\r\nbox-shadow:0 5px 16px rgba(0,0,0,0.2);\r\nbackground:white;\r\ncolor:black;\r\nz-index:10;\r\nborder-radius:1rem;\r\ndisplay:flex;\r\njustify-content:center;\r\n`\r\n\r\nexport const Content = styled.div`\r\n    width:100%;\r\n    height:100%;\r\n    display:flex;\r\n    flex-direction:column;\r\n    background-color:white;\r\n    border-radius:1rem;\r\n`\r\n\r\nexport const ImageContent = styled.img`\r\n    object-fit:contain;\r\n    height:${p => p.type===\"upload\"? \"90%\" : \"80%\"};\r\n`\r\n\r\nexport const DataContent = styled.div`\r\n    margin-top:0.2rem;\r\n    height:${p => p.type===\"upload\"? \"10%\" : \"20%\"}\r\n`\r\n\r\nexport const Details = styled.span`\r\n    margin-left:5%;\r\n    font-size:16px;\r\n    font-weight:500;\r\n    font-style:italic;\r\n    display:block;\r\n`\r\n\r\nexport const CropButton = styled.button`\r\n    font-size:1rem;\r\n    border-radius:10px;\r\n    margin-top:0.7rem;\r\n    padding:0.5rem 1rem;\r\n    outline:none;\r\n    cursor: pointer;\r\n    transition: 0.3s;\r\n    border:none;\r\n    transition: 0.3s;    \r\n    box-shadow: 0px 2px 6px 5px rgba(0,0,0,0.6);\r\n\r\n    :hover{\r\n        box-shadow: 0px 3px 8px 2px rgba(0,0,0,0.6);\r\n        transform: scale(1.1);\r\n    }\r\n\r\n    :active {\r\n        box-shadow: 0px 3px 6px 3px rgba(0,0,0,0.6);\r\n        transform: scale(1.05);\r\n    }\r\n`\r\n\r\nexport const Title = styled.input`\r\n    height:100%;\r\n    width:100%;\r\n    padding:0.5rem 1rem;\r\n    font-size:1rem;\r\n    outline:none;\r\n    border:none;\r\n    border-bottom-right-radius:1rem;\r\n    border-bottom-left-radius:1rem;\r\n    box-sizing:border-box;\r\n    margin-top:1rem;\r\n`\r\n\r\nconst ModifiedButtons = css`\r\n    position:absolute;\r\n    cursor: pointer;\r\n    right:20px;\r\n    width:32px;\r\n    height:32px;\r\n    padding:10px;\r\n    z-index:10;\r\n    background:white;\r\n    border-radius:999px;\r\n    box-shadow: 0px 2px 2px 2px rgba(0,0,0,0.6);\r\n    transition: 0.3s;\r\n`\r\n\r\nexport const LikeModalButton = styled(AiOutlineLike)`\r\n    \r\n    bottom:20px;\r\n    color:blue;\r\n    border: 3px solid blue;\r\n    ${ModifiedButtons}\r\n\r\n    :hover{\r\n        background:blue;\r\n        color:white;\r\n    }\r\n`\r\n\r\nexport const CloseModalButton = styled(MdClose)`\r\n    top:20px;\r\n    color:black;\r\n    border: 3px solid black;\r\n    ${ModifiedButtons}\r\n\r\n    :hover{\r\n        background:black;\r\n        color:white;\r\n    }\r\n`\r\n\r\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nconst initialState = {\r\n  showCloseMd:false\r\n};\r\n\r\n\r\nexport const modalSlice = createSlice({\r\n  name: 'modal',\r\n  initialState,\r\n  // The `reducers` field lets us define reducers and generate associated actions\r\n  reducers: {\r\n    switchModal: (state) => {\r\n        state.showCloseMd = !state.showCloseMd\r\n    }\r\n  }\r\n});\r\n\r\nexport const { switchModal } = modalSlice.actions;\r\n\r\nexport const selectModal = (state) => state.modal.showCloseMd;\r\n\r\nexport default modalSlice.reducer;\r\n","import { createSlice } from '@reduxjs/toolkit';\n\nconst initialState = {\n  image:null,\n  file:null,\n  title:null,\n  fx:null\n};\n\n\nexport const imageSlice = createSlice({\n  name: 'image',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    addImage: (state, action) => {\n      state.image = action.payload\n    },\n    addFile: (state, action) => {\n      state.file = action.payload\n    },\n    addFx: (state, action) => {\n      state.fx = action.payload\n    },\n    addTitle: (state, action) => {\n      state.title = action.payload\n  }\n  }\n});\n\nexport const { addImage, addFile, addTitle, addFx } = imageSlice.actions;\n\nexport const selectImage = (state) => state.image.image;\nexport const selectFile = (state) => state.image.file;\nexport const selectTitle = (state) => state.image.title;\nexport const selectFx = (state) => state.image.fx;\n\n\nexport default imageSlice.reducer;\n","import styled from 'styled-components'\r\nimport Cropper from \"react-cropper\";\r\nimport {AiOutlineLike} from 'react-icons/ai'\r\n\r\nexport const Content = styled.div`\r\n    height:100%;\r\n    width:100%;\r\n    padding:0 1rem;\r\n`\r\n\r\nexport const CropBox = styled(Cropper)`\r\n    height:100%;\r\n    width:100%;\r\n`\r\n\r\nexport const LikeModalButton = styled(AiOutlineLike)`\r\ncursor: pointer;\r\nposition:absolute;\r\nbottom:20px;\r\nright:20px;\r\nwidth:32px;\r\nheight:32px;\r\npadding:10px;\r\nz-index:10;\r\ncolor:blue;\r\nbackground:white;\r\nborder-radius:999px;\r\nborder: 3px solid blue;\r\nbox-shadow: 0px 2px 2px 2px rgba(0,0,0,0.6);\r\ntransition: 0.3s;\r\n\r\n:hover{\r\n    background:blue;\r\n    color:white;\r\n}\r\n`","import styled from 'styled-components'\r\n\r\nexport const Container = styled.div`\r\n    height:5px;\r\n    background: var(--primary);\r\n    margin-top:20px;\r\n`","import firebase from 'firebase'\r\nimport 'firebase/storage'\r\nimport 'firebase/firestore'\r\n\r\nvar firebaseConfig = {\r\n    apiKey: \"AIzaSyDR248wGDK2r9YyMXKWD8UPpRyz34vxGx8\",\r\n    authDomain: \"firegram-a0f3e.firebaseapp.com\",\r\n    projectId: \"firegram-a0f3e\",\r\n    storageBucket: \"firegram-a0f3e.appspot.com\",\r\n    messagingSenderId: \"582764977674\",\r\n    appId: \"1:582764977674:web:1557c2cb435ce6a19049f3\",\r\n    measurementId: \"G-6H45XRHKQD\"\r\n  };\r\n\r\n//   So that we don't reinitialize the app\r\nconst app = !firebase.apps.length\r\n    ? firebase.initializeApp(firebaseConfig)\r\n    : firebase.app()\r\n\r\nconst db = app.firestore()\r\nconst storage = firebase.storage()  \r\nconst timestamp = firebase.firestore.FieldValue.serverTimestamp;\r\n\r\n\r\nexport {db, storage, timestamp}","import { useState, useEffect } from \"react\"\r\nimport { storage, db, timestamp } from \"../../firebase/config\"\r\nimport { useSelector } from \"react-redux\"\r\nimport { selectTitle } from \"../../redux/imageSlice\"\r\n    \r\n\r\nconst useStorage = (file) => {\r\n    const name = useSelector(selectTitle)\r\n\r\n    const [progress,setProgress] = useState(null)\r\n    const [error,setError] = useState(null)\r\n    const [url,setUrl] = useState(null)\r\n    const collectionRef = db.collection('images')\r\n\r\n    // .put is a firebase function used to put the file onto the storage reference\r\n    // in firebase. on() is a listener that listens to state change event and does an action\r\n    useEffect(() => {\r\n        const storageRef = storage.ref(name)\r\n        storageRef.put(file).on('state_changed', (snap) => {\r\n            let percentage = (snap.bytesTransferred /snap.totalBytes) * 100\r\n            setProgress(percentage)\r\n        }, err => {\r\n            setError(err)\r\n        }, async () => {\r\n            const url = await storageRef.getDownloadURL()\r\n            const createdAt = timestamp()\r\n            collectionRef.add({ url, createdAt, name })\r\n            setUrl(url)\r\n        })\r\n\r\n    }, [file])\r\n\r\n    return {error, progress, url}\r\n}\r\n\r\nexport default useStorage\r\n","import { Container } from \"./progress-bar.styles\"\r\nimport useStorage from '../hooks/useStorage'\r\nimport { useEffect } from \"react\"\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { acceptReject } from \"../../redux/extraDetSlice\"\r\nimport { addFile, addFx, addImage, selectImage} from \"../../redux/imageSlice\"\r\nimport { switchModal } from \"../../redux/modalSlice\"\r\n\r\n\r\nconst ProgressBar = ({ cropData=null }) => {\r\n    const dispatch = useDispatch()\r\n    const image = useSelector(selectImage)\r\n    const {url, progress} = useStorage(cropData? cropData : image)\r\n\r\n    useEffect(() => {\r\n        if (url && image){\r\n            dispatch(acceptReject())  \r\n            dispatch(addImage(null))      \r\n        }\r\n        else if (url && cropData){\r\n            dispatch(addFile(null))\r\n            dispatch(addFx(null))\r\n            dispatch(switchModal())\r\n        }\r\n    }, [url, image, cropData])\r\n\r\n    return (\r\n        <Container style={{width:progress+'%'}}/>\r\n    )\r\n}\r\n\r\nexport default ProgressBar\r\n","\r\nimport { db, storage } from \"../../firebase/config\"\r\n\r\nconst deleteFile = async (file, id) => {  \r\n  const collectionRef = db.collection('images').doc(id)\r\n\r\n  const storageRef = storage.ref(file.name)\r\n  storageRef.delete().then(() => {\r\n      collectionRef.delete().then(() => {\r\n        return true\r\n      }).catch((error) => {\r\n          console.error(\"Error removing document: \", error);\r\n      });\r\n      \r\n    }).catch((error) => {\r\n      console.log(\"error\", error)\r\n      // Uh-oh, an error occurred!\r\n    });\r\n}\r\n\r\nexport default deleteFile\r\n","import styled from \"styled-components\"\r\n\r\n\r\nexport const ActionContainer = styled.div`\r\n    display:flex;\r\n    height:100%;\r\n    width:100%;  \r\n    justify-content:center; \r\n    align-items:center;\r\n`\r\n\r\nexport const ActionWrapper = styled.div`\r\n    display:flex;\r\n    width:65%;\r\n    height:20%;\r\n    padding:0.5rem 1rem;\r\n    flex-direction: column;\r\n\r\n    >span{\r\n        margin:0.7rem auto;\r\n        font-size:24px;\r\n        font-weight:700;\r\n        animation-name: flicker;\r\n        animation-duration: 4s;\r\n        animation-iteration-count: infinite;\r\n\r\n        @keyframes flicker {\r\n            0% { opacity: 1; }\r\n            50% { opacity: 0.1; }\r\n            100% { opacity: 1; }\r\n        }\r\n    }\r\n`","import ProgressBar from \"../progress-bar/progress-bar\"\r\nimport { useEffect, useState } from \"react\"\r\nimport deleteFile from \"../hooks/deletefx\"\r\nimport { useSelector } from \"react-redux\"\r\nimport { selectFile } from \"../../redux/imageSlice\"\r\nimport { ActionContainer, ActionWrapper } from \"./action.styles\"\r\n\r\n\r\n\r\nconst Action = ({ cropData }) => {\r\n    const fileFromDb = useSelector(selectFile)\r\n    const [completed, setCompleted] = useState(false)\r\n\r\n    useEffect(() => {\r\n        const fx = async () => {\r\n            return await deleteFile(cropData, fileFromDb.id)\r\n        }\r\n        setCompleted(fx)\r\n    }, [setCompleted])\r\n\r\n    return (\r\n        <ActionContainer>\r\n            {\r\n                completed?\r\n                <ActionWrapper>\r\n                    <span>...Cropping...</span>\r\n                    <ProgressBar cropData={cropData}/> \r\n                </ActionWrapper>:\r\n                null                \r\n            }\r\n        </ActionContainer>\r\n    )\r\n}\r\n\r\nexport default Action\r\n","export const b64ToFile = async (url, filename, mimeType) => {\r\n    mimeType = mimeType || (url.match(/^data:([^;]+);/)||'')[1];\r\n    return (fetch(url)\r\n        .then(function(res){return res.arrayBuffer();})\r\n        .then(function(buf){return new File([buf], filename, {type:mimeType});})\r\n    );\r\n}\r\n\r\n","import React, { useEffect, useState } from \"react\";\r\n\r\nimport \"cropperjs/dist/cropper.css\";\r\nimport {CropBox, Content, LikeModalButton} from \"./crops.styles\"\r\nimport Action from \"../actionfunction/action\";\r\nimport { b64ToFile } from \"../utils/b64ToFile.util\";\r\n\r\n\r\nconst Crop = ({ file }) => {\r\n\r\n    const [cropData, setCropData] = useState(null);\r\n    const [cropper, setCropper] = useState(null);\r\n\r\n    const getCropData = async (e) => {\r\n        e.preventDefault()\r\n        if (typeof(cropper) !== \"undefined\") {\r\n            const res = await b64ToFile(cropper.getCroppedCanvas().toDataURL(), file.name)\r\n            setCropData(res)\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n    }, [cropData])\r\n\r\n    return (\r\n        <Content>\r\n            {\r\n                cropData?\r\n                <Action cropData={cropData} /> :                       \r\n                    <CropBox\r\n                        initialAspectRatio={1}\r\n                        src={file.url}\r\n                        viewMode={2}\r\n                        guides={false}\r\n                        cropBoxResizable={false}\r\n                        minCropBoxHeight={5}\r\n                        minCropBoxWidth={5}\r\n                        background={false}\r\n                        responsive={true}\r\n                        autoCropArea={1}\r\n                        checkOrientation={false} // https://github.com/fengyuanchen/cropperjs/issues/671\r\n                        onInitialized={(instance) => {\r\n                        setCropper(instance);\r\n                        }}\r\n                    />\r\n            }\r\n            {\r\n                cropData?                \r\n                null :\r\n                <LikeModalButton onClick={getCropData}/> \r\n            }\r\n        </Content>  \r\n    )\r\n}\r\n\r\nexport default Crop\r\n","import {useEffect, useRef, useState} from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport {useSpring, animated} from 'react-spring'\r\nimport {acceptReject} from '../../redux/extraDetSlice'\r\n\r\nimport {Container, Background, ModalWrapper,DataContent, CloseModalButton, LikeModalButton, Content, ImageContent, Title, Details, CropButton} from './modal.styles'\r\nimport { selectModal, switchModal } from '../../redux/modalSlice'\r\nimport { addFile, addFx, addImage, addTitle, selectFile, selectFx, selectImage } from '../../redux/imageSlice'\r\nimport Crop from '../crop/crop'\r\n\r\n\r\n\r\nconst Modal = ({type=null}) => {\r\n    const dispatch = useDispatch()\r\n    const showCloseMd = useSelector(selectModal) \r\n\r\n    // crop function\r\n    const fx = useSelector(selectFx)\r\n    \r\n    // for display phase\r\n    const file = useSelector(selectFile)\r\n    const timestamp = file?.createdAt?.toDate()?.toDateString()\r\n    const [displayLike, setDisplayLike] = useState(true)\r\n\r\n    // vars for upload phase only\r\n    const image = useSelector(selectImage)\r\n    const [title, setTitle] = useState(null)\r\n    const [show, setShow] = useState(null)\r\n    const buttonRef = useRef()\r\n\r\n    const modalRef= useRef()\r\n    const animation = useSpring({\r\n        config: {\r\n            duration:500\r\n        },\r\n        opacity: showCloseMd? 1: 0,\r\n        transform: showCloseMd ? `translateY(0%)` : `translateY(-100%)`\r\n    })\r\n\r\n    const closeNullifyValues = () => {\r\n        type===\"upload\"?\r\n        dispatch(addImage(null)) :\r\n        dispatch(addFile(null))\r\n\r\n        dispatch(addFx(null))\r\n        dispatch(switchModal())  \r\n    }\r\n\r\n    const closeModal = (e) => {   \r\n        if (modalRef.current === e.target)\r\n            closeNullifyValues() \r\n    }\r\n\r\n    const closeByIcon = () => {\r\n        closeNullifyValues() \r\n    }\r\n\r\n    const acceptImage = (e) => {\r\n        e.preventDefault()\r\n        title?\r\n        dispatch(addTitle(title)) :\r\n        dispatch(addTitle(image.name))\r\n        dispatch(acceptReject())\r\n\r\n        dispatch(switchModal())\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (fx === \"crop\"){\r\n            setDisplayLike(false) \r\n        }\r\n        else{\r\n            if (type===\"upload\"){\r\n                setDisplayLike(true)\r\n                const reader = new FileReader()\r\n                reader.onloadend = () => {\r\n                    setShow(reader.result)\r\n                }\r\n                reader.readAsDataURL(image)\r\n            }\r\n            else if (type===\"display\"){\r\n                setDisplayLike(false)\r\n                dispatch(addImage(null))\r\n                \r\n                setShow(file.url)\r\n            }\r\n        }\r\n    }, [fx, setDisplayLike, setShow, image])\r\n\r\n    return (\r\n        <>\r\n        {\r\n            showCloseMd?\r\n            <Container>\r\n            <Background ref={modalRef} onClick={closeModal}>\r\n                <animated.div style={animation}>\r\n                <ModalWrapper>    \r\n                {   \r\n                    fx===\"crop\"?\r\n                    <Crop file={file}/> :\r\n                    <Content>\r\n                        <ImageContent \r\n                            src={show} alt=\"uploaded pic\"\r\n                            type={type}\r\n                        />\r\n                        {\r\n                            type===\"upload\"?\r\n                            <form>\r\n                            <DataContent type={type}>\r\n                                <Title \r\n                                    type=\"text\" \r\n                                    placeholder=\"Enter title\"\r\n                                    onChange={e => setTitle(e.target.value)}\r\n                                />\r\n                                <button \r\n                                    type=\"submit\"\r\n                                    style={{display:\"none\"}}\r\n                                    ref={buttonRef}\r\n                                    onClick={acceptImage}\r\n                                >\r\n                                </button>\r\n                            </DataContent>\r\n                            </form> :\r\n                            <DataContent type={type}>\r\n                                <Details>{file.name}</Details>\r\n                                <Details><time>{timestamp}</time></Details>\r\n                                <Details>\r\n                                    <CropButton onClick={() => dispatch(addFx(\"crop\"))}>Crop Mode</CropButton>\r\n                                </Details>\r\n                            </DataContent>\r\n                        }\r\n                    </Content>\r\n                }                \r\n                <CloseModalButton\r\n                    aria-label=\"Close modal\"\r\n                    onClick={closeByIcon}\r\n                />     \r\n                {\r\n                    displayLike?\r\n                    <LikeModalButton onClick={() => buttonRef.current.click()} /> :\r\n                    null\r\n                }              \r\n                </ModalWrapper>\r\n                </animated.div>\r\n            </Background>\r\n            </Container>\r\n            : null\r\n        }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Modal\r\n","import styled from 'styled-components'\r\n\r\nexport const Output = styled.div`\r\n\r\n`\r\n\r\nexport const Result = styled.div`\r\n\r\n`\r\n\r\nexport const Error = styled(Result)`\r\n\r\n`\r\n\r\nexport const File = styled(Result)`\r\n\r\n`\r\n\r\n\r\nexport const InputForm = styled.form`\r\n    margin: 30px auto 10px;\r\n    text-align: center;\r\n`\r\n\r\nexport const Label = styled.label`\r\n    display: block;\r\n    width: 30px;\r\n    height: 30px;\r\n    border: 1px solid var(--primary);\r\n    border-radius: 50%;\r\n    margin: 10px auto;\r\n    line-height: 30px;\r\n    color: var(--primary);\r\n    font-weight: bold;\r\n    font-size: 24px;\r\n\r\n    :hover{\r\n        background: var(--primary);\r\n        color: white;\r\n        cursor:pointer;\r\n    }\r\n\r\n    >input {\r\n        height: 0;\r\n        width: 0;\r\n        opacity: 0;\r\n    }\r\n`","import { useState } from \"react\"\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport Modal from \"../modal/modal\"\r\nimport ProgressBar from \"../progress-bar/progress-bar\"\r\nimport { Error, File, Output, Label, InputForm } from \"./form.styles\"\r\nimport {switchModal} from '../../redux/modalSlice'\r\nimport { addImage, selectImage } from \"../../redux/imageSlice\"\r\nimport { selectLike } from \"../../redux/extraDetSlice\"\r\n\r\n\r\nconst Form = () => {\r\n    const dispatch = useDispatch()\r\n    const like = useSelector(selectLike)\r\n    const image = useSelector(selectImage)\r\n\r\n    const [error, setError] = useState(null)\r\n    const ResultType = error ? Error : File\r\n\r\n\r\n    const changeHandler = (e) => {\r\n        const selected = e.target.files[0] \r\n        // image data is taken as blob. Blobs are immutable unserializable data which can be read via FileReader only. Redux will not accept\r\n        // blob in any way. Best method is to use createObjectURL which creates a local URL to the blob and that can be dispatched and\r\n        // used elsewhere in the program https://medium.com/@gabriele.cimato/on-how-to-store-an-image-in-redux-d623bcc06ca7\r\n\r\n        if (selected && selected.type.substr(0,5)===\"image\"){\r\n            dispatch(addImage(selected))\r\n            dispatch(switchModal())\r\n            setError(null)\r\n        }\r\n        else\r\n            setError(\"Please choose an image file\")\r\n    }\r\n\r\n    return (\r\n        <InputForm>\r\n            <Label>\r\n                <input \r\n                    type=\"file\" \r\n                    accept=\"image/*\"\r\n                    onChange={changeHandler}\r\n                />\r\n                <span>+</span>\r\n            </Label>\r\n            <Output>\r\n                <ResultType>                \r\n                {\r\n                    image?                            \r\n                        <Modal type=\"upload\"/>                    \r\n                    : null\r\n                }                       \r\n                {\r\n                    image && like &&\r\n                    <ProgressBar \r\n                    />\r\n                }\r\n                   \r\n                </ResultType>\r\n            </Output>\r\n        </InputForm>\r\n    )\r\n}\r\n\r\nexport default Form\r\n","import { useEffect, useState } from 'react'\r\nimport {db} from '../../firebase/config'\r\n\r\nconst useFirestore = collection => {\r\n    const [docs, setDocs] = useState(null)\r\n\r\n    // After retrieving data, it returns a function that is used to unsubscribe from the collection\r\n    // this is used as a cleanup function so the grid isn't displayed when there are no images to display\r\n\r\n    useEffect(() => {\r\n        const unsub = db.collection(collection)\r\n            .orderBy('createdAt',\"desc\")\r\n            .onSnapshot((snap) => {\r\n                let documents = [];\r\n                snap.forEach(doc => {\r\n                    documents.push({...doc.data(), id: doc.id});\r\n                });\r\n                setDocs(documents);\r\n            })\r\n\r\n        return () => unsub()\r\n    }, [collection])\r\n\r\n    return {docs}\r\n}\r\n\r\nexport default useFirestore\r\n","import { MdDelete } from 'react-icons/md'\r\nimport styled from 'styled-components'\r\n\r\nexport const GridContainer = styled.div`\r\n    margin: 20px auto;\r\n    display: grid;\r\n    grid-template-columns: 1fr 1fr 1fr;\r\n    grid-gap: 40px;\r\n`\r\n\r\nexport const HeaderBar = styled.div`    \r\n    cursor: pointer;\r\n    height:15%;\r\n    width:100%;\r\n    display:none;\r\n    justify-content:center;\r\n    position:absolute;\r\n    background-color:rgba(0,0,0,0.5);\r\n    bottom:0;\r\n\r\n    :hover{\r\n        background-color:black;\r\n    }\r\n`\r\n\r\nexport const CloseButton = styled(MdDelete)`\r\n    width:36px;\r\n    height:36px;\r\n    padding:5px;\r\n    border-radius:999px;\r\n    color:red;\r\n`\r\n\r\nexport const GridImage = styled.div`\r\n    overflow: hidden;\r\n    height: 0;\r\n    opacity: 0.8;\r\n    cursor:pointer;\r\n    width:300px;\r\n    height:300px;\r\n    position:relative;\r\n\r\n    >img{\r\n        height:100%;\r\n        width:100%;\r\n        object-fit:contain;\r\n    }\r\n\r\n    :hover ${HeaderBar}{\r\n        display:flex\r\n    }    \r\n`\r\n\r\n\r\n\r\n","const convertImgToBase64URL = async (url, callback, outputFormat=\"PNG\") =>{\r\n    var img = new Image();\r\n    img.crossOrigin = 'Anonymous';\r\n    img.onload = function(){\r\n        var canvas = document.createElement('CANVAS'),\r\n        ctx = canvas.getContext('2d'), dataURL;\r\n        canvas.height = img.height;\r\n        canvas.width = img.width;\r\n        ctx.drawImage(img, 0, 0);\r\n        dataURL = canvas.toDataURL(outputFormat);\r\n        callback(dataURL);\r\n        canvas = null; \r\n    };\r\n    img.src = url;\r\n}\r\n\r\nexport default convertImgToBase64URL","import useFirestore from \"../hooks/useFirestore\"\r\nimport { CloseButton, GridContainer, GridImage, HeaderBar } from \"./image-grid.styles\"\r\nimport { useDispatch } from \"react-redux\";\r\nimport { addFile, addTitle } from \"../../redux/imageSlice\";\r\nimport { switchModal } from \"../../redux/modalSlice\";\r\nimport convertImgToBase64URL from '../utils/ImgUrlToBlob.util'\r\nimport { useEffect, useState } from \"react\";\r\nimport deleteFile from \"../hooks/deletefx\";\r\n\r\nconst Grid = () => {\r\n    // 'images' is name of collection in firestore db)\r\n    // reload isn't used here explicitly but on a delete, it is causing a render in grid\r\n    const {docs} = useFirestore('images')\r\n    const [reload, setReload] = useState(false)\r\n    const dispatch = useDispatch()\r\n\r\n    const displayPage = async (details) => {\r\n        \r\n        await convertImgToBase64URL(details.url, function(base64Img){\r\n            dispatch(addFile({\r\n                ...details,\r\n                url:base64Img\r\n            }))  \r\n        });      \r\n        dispatch(addTitle(details.name))         \r\n        dispatch(switchModal())\r\n    }\r\n\r\n    const deleteImage = async (doc) => {\r\n        console.log(\"details : \",doc)\r\n        const res = await deleteFile(doc, doc.id)\r\n        if (res) setReload(prev => !prev)\r\n    }\r\n\r\n    useEffect(() => { \r\n        \r\n    }, [setReload])\r\n   \r\n\r\n    return (        \r\n        <GridContainer >\r\n            {\r\n                docs && docs.map(doc => (\r\n                    <GridImage \r\n                        key={doc.id} \r\n                        id={doc.id} \r\n                    >\r\n                        <HeaderBar onClick={() => deleteImage(doc)}>\r\n                            <CloseButton>Shit</CloseButton>\r\n                        </HeaderBar>\r\n                        <img \r\n                            onClick={() => displayPage(doc)}\r\n                            src={doc.url} \r\n                            alt=\"uploaded pic\" \r\n                        />\r\n                    </GridImage>\r\n                ))\r\n            } \r\n        </GridContainer>\r\n    )\r\n}\r\n\r\nexport default Grid\r\n","import styled from 'styled-components'\nimport Title from './components/title/title.component';\nimport Form from './components/upload/form.component';\nimport Grid from './components/image-grid/image-grid';\nimport { useSelector } from 'react-redux';\nimport { selectFile } from './redux/imageSlice';\nimport Modal from './components/modal/modal';\nimport { useEffect } from 'react';\n\nconst Container = styled.div`\n    max-width: 960px;\n    margin: 0 auto;\n`\n\nfunction App() {\n  const selectedFile = useSelector(selectFile)\n  \n\n  useEffect(() => {\n  },[selectedFile])\n\n  return (\n    <Container>\n      <Title />\n      <Form />    \n      {\n        selectedFile?\n        <Modal type=\"display\"/> : \n        <Grid />\n      }\n     \n    </Container>\n  );\n}\n\nexport default App;\n","import { configureStore} from '@reduxjs/toolkit';\nimport imageReducer from './imageSlice';\nimport modalReducer from './modalSlice';\nimport extraReducer from './extraDetSlice'\n\n// Augment middleware to consider Immutable.JS iterables serializable\n// const isSerializable = (value) => Iterable.isIterable(value) || isPlain(value)\n\n// const getEntries = (value) =>\n//   Iterable.isIterable(value) ? value.entries() : Object.entries(value)\n\n// const serializableMiddleware = createSerializableStateInvariantMiddleware({\n//   isSerializable,\n//   getEntries,\n// })\n\nexport const store = configureStore({\n  reducer: {\n    image: imageReducer,\n    modal: modalReducer,\n    extra: extraReducer\n  }\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './redux/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}